import math

import pynewtonmath as newton
from telegram import Update
from telegram.ext import CallbackContext, run_async

from MukeshRobot import dispatcher
from MukeshRobot.modules.disable import DisableAbleCommandHandler


@run_async
def simplify(update: Update, context: CallbackContext):
    args = context.args
    message = update.effective_message
    message.reply_text(newton.simplify("{}".format(args[0])))


@run_async
def factor(update: Update, context: CallbackContext):
    args = context.args
    message = update.effective_message
    message.reply_text(newton.factor("{}".format(args[0])))


@run_async
def derive(update: Update, context: CallbackContext):
    args = context.args
    message = update.effective_message
    message.reply_text(newton.derive("{}".format(args[0])))


@run_async
def integrate(update: Update, context: CallbackContext):
    args = context.args
    message = update.effective_message
    message.reply_text(newton.integrate("{}".format(args[0])))


@run_async
def zeroes(update: Update, context: CallbackContext):
    args = context.args
    message = update.effective_message
    message.reply_text(newton.zeroes("{}".format(args[0])))


@run_async
def tangent(update: Update, context: CallbackContext):
    args = context.args
    message = update.effective_message
    message.reply_text(newton.tangent("{}".format(args[0])))


@run_async
def area(update: Update, context: CallbackContext):
    args = context.args
    message = update.effective_message
    message.reply_text(newton.area("{}".format(args[0])))


@run_async
def cos(update: Update, context: CallbackContext):
    args = context.args
    message = update.effective_message
    message.reply_text(math.cos(int(args[0])))


@run_async
def sin(update: Update, context: CallbackContext):
    args = context.args
    message = update.effective_message
    message.reply_text(math.sin(int(args[0])))


@run_async
def tan(update: Update, context: CallbackContext):
    args = context.args
    message = update.effective_message
    message.reply_text(math.tan(int(args[0])))


@run_async
def arccos(update: Update, context: CallbackContext):
    args = context.args
    message = update.effective_message
    message.reply_text(math.acos(int(args[0])))


@run_async
def arcsin(update: Update, context: CallbackContext):
    args = context.args
    message = update.effective_message
    message.reply_text(math.asin(int(args[0])))


@run_async
def arctan(update: Update, context: CallbackContext):
    args = context.args
    message = update.effective_message
    message.reply_text(math.atan(int(args[0])))


@run_async
def abs(update: Update, context: CallbackContext):
    args = context.args
    message = update.effective_message
    message.reply_text(math.fabs(int(args[0])))


@run_async
def log(update: Update, context: CallbackContext):
    args = context.args
    message = update.effective_message
    message.reply_text(math.log(int(args[0])))


__help__ = """
*·¥ç·¥Ä·¥õ ús*
s·¥è ü·¥†·¥ás ·¥Ñ·¥è·¥ç·¥ò ü·¥áx ·¥ç·¥Ä·¥õ ú ·¥ò Ä·¥è ô ü·¥á·¥çs ·¥ús…™…¥…¢  ú·¥õ·¥õ·¥òs://…¥·¥á·¥°·¥õ·¥è…¥.…¥·¥è·¥°.s ú
‚ùç /math *:* ·¥ç·¥Ä·¥õ ú `/·¥ç·¥Ä·¥õ ú 2^2+2(2)`
‚ùç /factor *:* “ì·¥Ä·¥Ñ·¥õ·¥è Ä `/“ì·¥Ä·¥Ñ·¥õ·¥è Ä x^2 + 2x`
‚ùç /derive *:* ·¥Ö·¥á Ä…™·¥†·¥á `/·¥Ö·¥á Ä…™·¥†·¥á x^2+2x`
‚ùç /integrate *:* …™…¥·¥õ·¥á…¢ Ä·¥Ä·¥õ·¥á `/…™…¥·¥õ·¥á…¢ Ä·¥Ä·¥õ·¥á x^2+2x`
‚ùç /zeroes *:* “ì…™…¥·¥Ö 0's `/·¥¢·¥á Ä·¥è·¥ás x^2+2x`
‚ùç /tangent *:* “ì…™…¥·¥Ö ·¥õ·¥Ä…¥…¢·¥á…¥·¥õ `/·¥õ·¥Ä…¥…¢·¥á…¥·¥õ 2 üx^3`
‚ùç /area *:* ·¥Ä Ä·¥á·¥Ä ·¥ú…¥·¥Ö·¥á Ä ·¥Ñ·¥ú Ä·¥†·¥á `/·¥Ä Ä·¥á·¥Ä 2:4 üx^3`
‚ùç /cos *:* ·¥Ñ·¥ès…™…¥·¥á `/·¥Ñ·¥ès ·¥ò…™`
‚ùç /sin *:* s…™…¥·¥á `/s…™…¥ 0`
‚ùç /tan *:* ·¥õ·¥Ä…¥…¢·¥á…¥·¥õ `/·¥õ·¥Ä…¥ 0`
‚ùç /arccos *:* …™…¥·¥†·¥á Äs·¥á ·¥Ñ·¥ès…™…¥·¥á `/·¥Ä Ä·¥Ñ·¥Ñ·¥ès 1`
‚ùç /arcsin *:* …™…¥·¥†·¥á Äs·¥á s…™…¥·¥á `/·¥Ä Ä·¥Ñs…™…¥ 0`
‚ùç /arctan *:* …™…¥·¥†·¥á Äs·¥á ·¥õ·¥Ä…¥…¢·¥á…¥·¥õ `/·¥Ä Ä·¥Ñ·¥õ·¥Ä…¥ 0`
‚ùç /abs *:* ·¥Ä ôs·¥è ü·¥ú·¥õ·¥á ·¥†·¥Ä ü·¥ú·¥á `/·¥Ä ôs -1`
‚ùç /log *:*  ü·¥è…¢·¥Ä Ä…™·¥õ ú·¥ç `/ ü·¥è…¢ 2 ü8`

_·¥ã·¥á·¥á·¥ò …™…¥ ·¥ç…™…¥·¥Ö_: ·¥õ·¥è “ì…™…¥·¥Ö ·¥õ ú·¥á ·¥õ·¥Ä…¥…¢·¥á…¥·¥õ  ü…™…¥·¥á ·¥è“ì ·¥Ä “ì·¥ú…¥·¥Ñ·¥õ…™·¥è…¥ ·¥Ä·¥õ ·¥Ä ·¥Ñ·¥á Ä·¥õ·¥Ä…™…¥ x ·¥†·¥Ä ü·¥ú·¥á, s·¥á…¥·¥Ö ·¥õ ú·¥á  Ä·¥á«´·¥ú·¥ás·¥õ ·¥Äs ·¥Ñ|“ì(x) ·¥° ú·¥á Ä·¥á ·¥Ñ …™s ·¥õ ú·¥á …¢…™·¥†·¥á…¥ x ·¥†·¥Ä ü·¥ú·¥á ·¥Ä…¥·¥Ö “ì(x) …™s ·¥õ ú·¥á “ì·¥ú…¥·¥Ñ·¥õ…™·¥è…¥ ·¥áx·¥ò Ä·¥áss…™·¥è…¥, ·¥õ ú·¥á s·¥á·¥ò·¥Ä Ä·¥Ä·¥õ·¥è Ä …™s ·¥Ä ·¥†·¥á Ä·¥õ…™·¥Ñ·¥Ä ü  ô·¥Ä Ä '|'. s·¥á·¥á ·¥õ ú·¥á ·¥õ·¥Ä ô ü·¥á ·¥Ä ô·¥è·¥†·¥á “ì·¥è Ä ·¥Ä…¥ ·¥áx·¥Ä·¥ç·¥ò ü·¥á  Ä·¥á«´·¥ú·¥ás·¥õ.
·¥õ·¥è “ì…™…¥·¥Ö ·¥õ ú·¥á ·¥Ä Ä·¥á·¥Ä ·¥ú…¥·¥Ö·¥á Ä ·¥Ä “ì·¥ú…¥·¥Ñ·¥õ…™·¥è…¥, s·¥á…¥·¥Ö ·¥õ ú·¥á  Ä·¥á«´·¥ú·¥ás·¥õ ·¥Äs ·¥Ñ:·¥Ö|“ì(x) ·¥° ú·¥á Ä·¥á ·¥Ñ …™s ·¥õ ú·¥á s·¥õ·¥Ä Ä·¥õ…™…¥…¢ x ·¥†·¥Ä ü·¥ú·¥á, ·¥Ö …™s ·¥õ ú·¥á ·¥á…¥·¥Ö…™…¥…¢ x ·¥†·¥Ä ü·¥ú·¥á, ·¥Ä…¥·¥Ö “ì(x) …™s ·¥õ ú·¥á “ì·¥ú…¥·¥Ñ·¥õ…™·¥è…¥ ·¥ú…¥·¥Ö·¥á Ä ·¥° ú…™·¥Ñ ú  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ ú·¥á ·¥Ñ·¥ú Ä·¥†·¥á  ô·¥á·¥õ·¥°·¥á·¥á…¥ ·¥õ ú·¥á ·¥õ·¥°·¥è x ·¥†·¥Ä ü·¥ú·¥ás.
·¥õ·¥è ·¥Ñ·¥è·¥ç·¥ò·¥ú·¥õ·¥á “ì Ä·¥Ä·¥Ñ·¥õ…™·¥è…¥s, ·¥á…¥·¥õ·¥á Ä ·¥áx·¥ò Ä·¥áss…™·¥è…¥s ·¥Äs …¥·¥ú·¥ç·¥á Ä·¥Ä·¥õ·¥è Ä(·¥è·¥†·¥á Ä)·¥Ö·¥á…¥·¥è·¥ç…™…¥·¥Ä·¥õ·¥è Ä. “ì·¥è Ä ·¥áx·¥Ä·¥ç·¥ò ü·¥á, ·¥õ·¥è ·¥ò Ä·¥è·¥Ñ·¥áss 2/4  è·¥è·¥ú ·¥ç·¥ús·¥õ s·¥á…¥·¥Ö …™…¥  è·¥è·¥ú Ä ·¥áx·¥ò Ä·¥áss…™·¥è…¥ ·¥Äs 2(·¥è·¥†·¥á Ä)4. ·¥õ ú·¥á  Ä·¥ás·¥ú ü·¥õ ·¥áx·¥ò Ä·¥áss…™·¥è…¥ ·¥°…™ ü ü  ô·¥á …™…¥ s·¥õ·¥Ä…¥·¥Ö·¥Ä Ä·¥Ö ·¥ç·¥Ä·¥õ ú …¥·¥è·¥õ·¥Ä·¥õ…™·¥è…¥ (1/2, 3/4).

‚òÜ............ùô±ùöà ¬ª [ùöÖùô∏ùôø ùô±ùôæùöà](https://t.me/the_vip_boy)............‚òÜ
"""

__mod_name__ = "üìçM·¥Ä·¥õ úsüìç"

SIMPLIFY_HANDLER = DisableAbleCommandHandler("math", simplify)
FACTOR_HANDLER = DisableAbleCommandHandler("factor", factor)
DERIVE_HANDLER = DisableAbleCommandHandler("derive", derive)
INTEGRATE_HANDLER = DisableAbleCommandHandler("integrate", integrate)
ZEROES_HANDLER = DisableAbleCommandHandler("zeroes", zeroes)
TANGENT_HANDLER = DisableAbleCommandHandler("tangent", tangent)
AREA_HANDLER = DisableAbleCommandHandler("area", area)
COS_HANDLER = DisableAbleCommandHandler("cos", cos)
SIN_HANDLER = DisableAbleCommandHandler("sin", sin)
TAN_HANDLER = DisableAbleCommandHandler("tan", tan)
ARCCOS_HANDLER = DisableAbleCommandHandler("arccos", arccos)
ARCSIN_HANDLER = DisableAbleCommandHandler("arcsin", arcsin)
ARCTAN_HANDLER = DisableAbleCommandHandler("arctan", arctan)
ABS_HANDLER = DisableAbleCommandHandler("abs", abs)
LOG_HANDLER = DisableAbleCommandHandler("log", log)

dispatcher.add_handler(SIMPLIFY_HANDLER)
dispatcher.add_handler(FACTOR_HANDLER)
dispatcher.add_handler(DERIVE_HANDLER)
dispatcher.add_handler(INTEGRATE_HANDLER)
dispatcher.add_handler(ZEROES_HANDLER)
dispatcher.add_handler(TANGENT_HANDLER)
dispatcher.add_handler(AREA_HANDLER)
dispatcher.add_handler(COS_HANDLER)
dispatcher.add_handler(SIN_HANDLER)
dispatcher.add_handler(TAN_HANDLER)
dispatcher.add_handler(ARCCOS_HANDLER)
dispatcher.add_handler(ARCSIN_HANDLER)
dispatcher.add_handler(ARCTAN_HANDLER)
dispatcher.add_handler(ABS_HANDLER)
dispatcher.add_handler(LOG_HANDLER)
